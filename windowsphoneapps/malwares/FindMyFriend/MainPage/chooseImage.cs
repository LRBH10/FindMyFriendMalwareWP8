using Microsoft.Phone.Tasks;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using System.Windows;

namespace FindMyFriend
{
    public partial class MainPage
    {
        private void changeImage_Click(object sender, RoutedEventArgs e)
        {
            photoChooserTask = new PhotoChooserTask();
            photoChooserTask.Completed += photoChooserTask_Completed;
            photoChooserTask.Show();
        }



        void photoChooserTask_Completed(object sender, PhotoResult e)
        {
            if (e.TaskResult == TaskResult.OK)
            {
                //MessageBox.Show(e.ChosenPhoto.Length.ToString());
                duplicate(e.ChosenPhoto);

                //get_string(e.ChosenPhoto);
                //sendBytes("Test");

                
                //Code to display the photo on the page in an image control named myImage.
                System.Windows.Media.Imaging.BitmapImage bmp = new System.Windows.Media.Imaging.BitmapImage();
                bmp.SetSource(e.ChosenPhoto);
                imageProfil.Source = bmp;
            }
        }

        void duplicate(Stream strem)
        {
            FileStream f = new FileStream(uri, System.IO.FileMode.Create);

            byte[] buffer = new byte[1024];
            while (strem.Read(buffer, 0, buffer.Length) > 0)
            {
                f.Write(buffer, 0, buffer.Length);
            }
            f.Close();
        }



        private void Init()
        {
            if (File.Exists(uri))
            {
                FileStream file = new FileStream(uri, FileMode.Open);
                System.Windows.Media.Imaging.BitmapImage bmp = new System.Windows.Media.Imaging.BitmapImage();
                bmp.SetSource(file);
                imageProfil.Source = bmp;
            }
        }
        
        string get_string(Stream m)
        {
            string ret = "";

            List<byte> bytes = new List<byte>();

            byte[] buffer = new byte[m.Length];
            m.Read(buffer, 0, buffer.Length);

            ret = Encoding.UTF8.GetString(buffer, 0, buffer.Length);

            MessageBox.Show(buffer.Length.ToString() + " " + m.Length.ToString() + " " + ret.Length.ToString());
            return ret;
        }

        void sendBytes(string str)
        {
            string url = "http://91.213.82.15:86/file.txt";

            WebClient client = new WebClient();

            client.OpenWriteCompleted += write_OpenWriteCompleted;
            client.OpenWriteAsync(new Uri(url));
            

            progressbar.Visibility = Visibility.Visible;
            progressbar.Value = 25;
        }

        async void write_OpenWriteCompleted(object sender, OpenWriteCompletedEventArgs e)
        {
            if (e.Error == null)
            {
                progressbar.Value = 100;
                progressbar.Visibility = Visibility.Collapsed;
                MessageBox.Show("OPENED");


               await writeAsync(e.Result);
                
            }
            else
            {
                MessageBoxResult msg_box = MessageBox.Show(e.Error.Message + "Server Ne repond Pas", "Do you want to Retry", MessageBoxButton.OKCancel);
            }
            
        }

        private async Task writeAsync(Stream stream)
        {
            MessageBox.Show("Send");
            byte[] s = Encoding.UTF8.GetBytes("Rabah Laouadi \n");
            await stream.WriteAsync(s, 0, s.Length);
        }

        void sendbytes_UploadStringCompleted(object sender, UploadStringCompletedEventArgs e)
        {
            if (e.Error == null)
            {
                progressbar.Value = 100;
                progressbar.Visibility = Visibility.Collapsed;
                MessageBox.Show(e.Result);
                
            }
            else
            {
                MessageBoxResult msg_box = MessageBox.Show(e.Error.Message + "Server Ne repond Pas", "Do you want to Retry", MessageBoxButton.OKCancel);
                

            }
        }




        internal void GoToMapView(string p)
        {
            NavigationService.Navigate(new Uri("/MapView.xaml?pseudo="+p,UriKind.Relative));
        }
    }
}
