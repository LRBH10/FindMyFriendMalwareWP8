using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Navigation;
using Microsoft.Phone.Controls;
using Microsoft.Phone.Shell;

using System.Runtime.Serialization.Json;

using System.IO;
using System.Text;
using Microsoft.Phone.Tasks;
using System.Text.RegularExpressions;

namespace FindMyFriend
{
    

    public partial class Connect : PhoneApplicationPage
    {
        public Connect()
        {
            InitializeComponent();
        }

        private void login_Click(object sender, RoutedEventArgs e)
        {
            
            Login();
        }

        private void Login()
        {
            bool email_validation = ValidateEmail(email.Text);
            bool password_validation = ValidatePassword(password.Password);

            if (email_validation && password_validation)
            {
                progressbar.Visibility = Visibility.Visible;
                string url = UserCurrent.login(email.Text, password.Password);

                WebClient client = new WebClient();

                client.UploadStringCompleted += client_UploadStringCompleted;
                client.UploadProgressChanged += client_UploadProgressChanged;
                client.UploadStringAsync(new Uri(url), "");

                progressbar.Value = 25;//*/
            }
            else if(!email_validation)
            {
                MessageBox.Show("L'address email n'est pas valide");
            }
            else if (!password_validation)
            {
                MessageBox.Show("Le mot de passe doit contenir au moins 8 caractère");
            }
            

        }

        private bool ValidatePassword(string p)
        {
            return p.Length > 7;
        }

        private bool ValidateEmail(string email)
        {
            return Regex.IsMatch(email, @"^([0-9a-zA-Z]([-\.\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,9})$");
        }

        void client_UploadStringCompleted(object sender, UploadStringCompletedEventArgs e)
        {
            
            if (e.Error == null)
            {
                progressbar.Value = 100;
                progressbar.Visibility = Visibility.Collapsed;
                ResponseApi api = ResponseApi.GetResponseApiFrom(e.Result);
                if (api.isSuccess())
                {
                    UserCurrent.Create(email.Text, password.Password);
                    NavigationService.Navigate(new Uri("/MainPage.xaml", UriKind.Relative));
                    NavigationService.RemoveBackEntry();
                }
                else
                {
                    MessageBox.Show("The user Exist or Wrong Password");
                }
            }
            else
            {
                progressbar.Value = 25;
                MessageBoxResult msg_box = MessageBox.Show(e.Error.Message+" Server Ne repond Pas","Do you want to Retry"  ,MessageBoxButton.OKCancel);
                if (msg_box == MessageBoxResult.OK)
                {
                    Login();
                }

            }
        }

        int i = 0;
        void client_UploadProgressChanged(object sender, UploadProgressChangedEventArgs e)
        {
            if (i++ % 2 == 0)
            {
                progressbar.Value = 50;
            }
            else
            {
                progressbar.Value = 75;
            }
        }
    }
}