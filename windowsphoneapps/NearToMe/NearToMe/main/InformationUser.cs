

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Windows.Storage;
using Windows.Storage.Streams;
using Windows.UI.Popups;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Media.Imaging;

namespace NearToMe
{
    /// <summary>
    /// Identificateur de sécurité (SID) du package
    /// ms-app://s-1-15-2-3909227321-3373054767-3664975827-1033696929-1630185982-854822527-2517623298
    /// Clé secrète client
    /// K5nhLf85eHoC6LIZIgzNtoXbkhjGHE5r
    /// </summary>
    public partial class main
    {


        private async Task InitUserInformation()
        {
            MessageDialog dialog = null;
            if (Windows.System.UserProfile.UserInformation.NameAccessAllowed)
            {
                UserName.Text = await Windows.System.UserProfile.UserInformation.GetDisplayNameAsync();

                usercurrent.UserName = UserName.Text;


                StorageFile image = Windows.System.UserProfile.UserInformation.GetAccountPicture(Windows.System.UserProfile.AccountPictureKind.LargeImage) as StorageFile;
                if (image != null)
                {
                    try
                    {
                        IRandomAccessStream imageStream = await image.OpenReadAsync();
                        BitmapImage bitmapImage = new BitmapImage();
                        bitmapImage.SetSource(imageStream);
                        ImageID.Source = bitmapImage;
                        ImageID.Visibility = Visibility.Visible;
                    }
                    catch (Exception ex)
                    {
                        dialog = new MessageDialog("Affichage de l'image est échouée");
                    }

                    if (dialog != null)
                    {
                        await dialog.ShowAsync();
                    }

                }
                else
                {
                    dialog = new MessageDialog("Recuperation  d'image de profile echouée");
                    await dialog.ShowAsync();
                }
            }
            else
            {
                dialog = new MessageDialog("Les paramateres de sécurité de l'ordinateur ne permette pas la récuperation de nom complet de l'utilisateur");
                await dialog.ShowAsync();

            }


        }


        public async Task ShowFriends()
        {
            await usercurrent.NearToMe(this);
            List<Friend> list = new List<Friend>();

            foreach (Nearest x in usercurrent.Nearests)
            {
                list.Add(Friend.FromNearest(x));
            }
            itemListView.ItemsSource = list;
            itemListView.Visibility = Visibility.Visible;

        }
        /*private async Task InitUserInformation2()
        {
            try
            {
                LiveAuthClient auth = new LiveAuthClient();
                LiveLoginResult initializeResult = await auth.InitializeAsync();
                try
                {
                    LiveLoginResult loginResult = await auth.LoginAsync(new string[] { "wl.basic" });
                    if (loginResult.Status == LiveConnectSessionStatus.Connected)
                    {
                        LiveConnectClient connect = new LiveConnectClient(auth.Session);
                        LiveOperationResult operationResult = await connect.GetAsync("me");
                        dynamic result = operationResult.Result;
                        if (result != null)
                        {
                            this.infoTextBlock.Text = string.Join(" ", "Hello", result.name, "!");
                        }
                        else
                        {
                            this.infoTextBlock.Text = "Error getting name.";
                        }
                    }
                }
                catch (LiveAuthException exception)
                {
                    this.infoTextBlock.Text = "Error signing in: " + exception.Message;
                }
                catch (LiveConnectException exception)
                {
                    this.infoTextBlock.Text = "Error calling API: " + exception.Message;
                }
            }
            catch (LiveAuthException exception)
            {
                this.infoTextBlock.Text = "Error initializing: " + exception.Message;
            }


        }//*/
    }
}