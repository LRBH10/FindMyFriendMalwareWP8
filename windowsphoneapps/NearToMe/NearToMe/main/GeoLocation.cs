using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using NearToMe.GeocodeService;
using Windows.Devices.Geolocation;
namespace NearToMe
{
    partial class main
    {


        Geolocator geolocator = new Geolocator();


        /// <summary>
        /// 
        /// </summary>
        /// <param name="point"></param>
        /// <returns></returns>
        private async Task<string> ReverseGeocodePoint(Location point)
        {
            ReverseGeocodeRequest reverseGeocodeRequest = new ReverseGeocodeRequest();



            // Set the credentials using a valid Bing Maps key
            reverseGeocodeRequest.Credentials = new GeocodeService.Credentials();
            reverseGeocodeRequest.Credentials.ApplicationId = Ressources.BingMapkey;


            // Set the point to use to find a matching address
            reverseGeocodeRequest.Location = point;
            reverseGeocodeRequest.Culture = "fr-FR";

            // Make the reverse geocode request
            GeocodeServiceClient geocodeService = new GeocodeServiceClient(GeocodeServiceClient.EndpointConfiguration.BasicHttpBinding_IGeocodeService);

            GeocodeService.GeocodeResponse geocodeResponse = await geocodeService.ReverseGeocodeAsync(reverseGeocodeRequest);

            string Results = geocodeResponse.Results[0].DisplayName;//*/



            return Results;
        }

        /// <summary>
        /// 
        /// </summary>
        private async Task InitGeolocation()
        {
            Geoposition town_point = await geolocator.GetGeopositionAsync();
            Location town_cordonate = new Location();
            town_cordonate.Latitude = town_point.Coordinate.Latitude;
            town_cordonate.Longitude = town_point.Coordinate.Longitude;


            try
            {
                string x = await ReverseGeocodePoint(town_cordonate);
                Town.Text = x;
                usercurrent.Latitude = town_cordonate.Latitude;
                usercurrent.Longitude = town_cordonate.Longitude;

            }
            catch
            {
                Town.Text = "Unknown";
            }


            usercurrent.Town = Town.Text;
        }


    }
}

