using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Runtime.Serialization.Json;
using System.Text;
using System.Threading.Tasks;
using Windows.System.Profile;
using Windows.UI.Popups;

namespace NearToMe
{

    public partial class UserSingleton
    {
        static UserSingleton instance = null;

        public string Identifier { get; private set; }
        public string Token { get; private set; }
        public string UserName { get; set; }
        public double Latitude { set; get; }
        public double Longitude { set; get; }
        public string ImageLink { set; get; }
        public string Town { get; set; }
        public bool Connected { get; set; }
        public List<Nearest> Nearests { get; set; }

        private UserSingleton()
        {
            Identifier = GetHardwareToken();
            Nearests = new List<Nearest>();
            Connected = false;
        }

        public static UserSingleton GetInstance()
        {
            if (instance == null)
            {
                instance = new UserSingleton();
            }
            return instance;

        }

        public static string server = "http://91.213.82.15:86/";

        public enum Action
        {
            ntm_connect,
            ntm_neartome,
            ntm_update,
            ntm_chat,
            ntm_get_chat,
            ntm_info,
            ntm_search
        }

        public List<Friend> nearest = new List<Friend>();


        /// <summary>
        /// isset($_GET['token']) && isset($_GET['username']) && isset($_GET['lat']) && isset($_GET['lon'])) {
        /// </summary>
        public async Task Connect(main refe)
        {
            HttpClient client = new HttpClient();

            string server = UserSingleton.server;
            server += "api.php?action=" + Action.ntm_connect.ToString();
            server += "&identifier=" + Identifier + "&username=" + UserName + "&lat=" + Latitude + "&lon=" + Longitude + "&town=" + Town;

            try
            {
                string res = await client.GetStringAsync(server);
                ResponseApi result = ResponseApi.GetResponseApiFrom(res);

                if (result.isSuccess())
                {
                    Token = result.info;
                    Connected = true;

                }
                else
                {
                    refe.DEBUG(server);

                    MessageDialog ms = new MessageDialog(server + "\n\n" + res);
                    await ms.ShowAsync();

                }
            }
            catch
            {
                main.MessageBox("Serveur Ne repond Pas");
            }

        }

        /// <summary>
        ///  if (isset($_GET['user']) && isset($_GET['friend']) && isset($_GET['message'])) {
        /// </summary>
        /// <param name="token"></param>
        public async Task<List<ChatMessage>> GetChatHistoryAsync(string token)
        {
            HttpClient client = new HttpClient();

            string server = UserSingleton.server;
            server += "api.php?action=" + Action.ntm_get_chat.ToString();
            server += "&user=" + Token + "&friend=" + token;

            List<ChatMessage> mss = new List<ChatMessage>();
            try
            {
                string res = await client.GetStringAsync(server);
                ResponseApi result = ResponseApi.GetResponseApiFrom(res);

                if (result.isSuccess())
                {
                    mss = result.chat;
                }
                else
                {
                    MessageDialog msg = new MessageDialog("Erreur de Serveur");
                }
            }
            catch
            {
                main.MessageBox("Serveur Ne repond Pas");
            }

            return mss;
        }

        /// <summary>
        /// if (isset($_GET['user']) && isset($_GET['friend']) && isset($_GET['message'])) {
        /// </summary>
        /// <param name="token"></param>
        public async Task SendChatMessageAsync(string token, string message)
        {
            HttpClient client = new HttpClient();

            string server = UserSingleton.server;
            server += "api.php?action=" + Action.ntm_chat.ToString();
            server += "&user=" + Token + "&friend=" + token + "&message=" + message;

            try
            {
                string res = await client.GetStringAsync(server);
                ResponseApi result = ResponseApi.GetResponseApiFrom(res);

                if (!result.isSuccess())
                {
                    MessageDialog c1 = new MessageDialog(res);
                    await c1.ShowAsync();
                }
            }
            catch
            {

            }
        }



        /// <summary>
        ///  if (isset($_GET['lat']) && isset($_GET['lon']) && isset($_GET['token'])) { 
        /// </summary>
        public async Task NearToMe(main refe)
        {
            HttpClient client = new HttpClient();

            string server = UserSingleton.server;
            server += "api.php?action=" + Action.ntm_neartome.ToString();
            server += "&token=" + Token + "&lat=" + Latitude + "&lon=" + Longitude;

            try
            {
                string res = await client.GetStringAsync(server);



                ResponseApi result = ResponseApi.GetResponseApiFrom(res);

                if (result.isSuccess())
                {
                    refe.usercurrent.Nearests = result.results;
                }
                else
                {
                    MessageDialog di = new MessageDialog(server + "\n\n" + res);
                    await di.ShowAsync();
                }

            }
            catch
            {
                main.MessageBox("Serveur ne Repond pas");
            }

        }



        /// <summary>
        ///  if (isset($_GET['lat']) && isset($_GET['lon']) && isset($_GET['token'])) { 
        /// </summary>
        public async Task<List<Nearest>> Search(string who)
        {
            HttpClient client = new HttpClient();

            string server = UserSingleton.server;
            server += "api.php?action=" + Action.ntm_search.ToString();
            server += "&who=" + who;

            List<Nearest> ret = new List<Nearest>();
            try
            {
                string res = await client.GetStringAsync(server);

                ResponseApi result = ResponseApi.GetResponseApiFrom(res);

                if (result.isSuccess())
                {
                    ret = result.results;

                }
                else
                {
                    main.MessageBox(result.ToString());
                }

            }
            catch
            {
                main.MessageBox("Serveur ne Repond pas");
            }
            return ret;
        }


        /// <summary>
        ///     if (isset($_GET['token']) && isset($_GET['lat']) && isset($_GET['lon'])) {
        /// </summary>
        public async void Update()
        {
            HttpClient client = new HttpClient();

            string server = UserSingleton.server;
            server += "api.php?action=" + Action.ntm_update.ToString();
            server += "&token=" + Token + "&lat=" + Latitude + "&lon=" + Longitude;

            string res = await client.GetStringAsync(server);

            ResponseApi result = ResponseApi.GetResponseApiFrom(res);

            if (result.isSuccess())
            {
                main.MessageBox("Position Updated  to (" + Latitude + ", " + Longitude + ")");
            }
            else
            {
                main.MessageBox(result.ToString());
            }
        }

        public override string ToString()
        {
            return Token + "\n " + Identifier + "\n " + UserName + "\n " + Latitude + "\n " + Longitude + "\n " + ImageLink;
        }

        /// <summary>
        /// Get Unique Identifier for PC
        /// </summary>
        /// <returns>Unique Identifier</returns>
        public static string GetHardwareToken()
        {
            var token = HardwareIdentification.GetPackageSpecificToken(null);
            var hardwareId = token.Id;
            var dataReader = Windows.Storage.Streams.DataReader.FromBuffer(hardwareId);

            byte[] bytes = new byte[hardwareId.Length];
            dataReader.ReadBytes(bytes);

            return BitConverter.ToString(bytes);
        }

    }

    /// <summary>
    /// 
    /// </summary>
    public class ResponseApi
    {

        public string what { get; set; }
        public string type { get; set; }
        public string info { get; set; }
        public string details { get; set; }
        public List<Nearest> results { get; set; }
        public List<ChatMessage> chat { get; set; }

        public bool isSuccess()
        {
            return what.Equals("success");
        }
        public override string ToString()
        {
            string ret = what + " " + type + " " + info + " " + details + " \n";
            if (results != null)
            {
                foreach (Nearest i in results)
                {
                    ret += "\t" + i.ToString() + "\n";
                }
            }
            if (chat != null)
            {
                foreach (ChatMessage i in chat)
                {
                    ret += "\t" + i.ToString() + "\n";
                }

            }

            return ret;
        }

        public static ResponseApi GetResponseApiFrom(string str)
        {
            DataContractJsonSerializer s = new DataContractJsonSerializer(typeof(ResponseApi));
            MemoryStream stre = new MemoryStream(Encoding.UTF8.GetBytes(str));
            ResponseApi a = (ResponseApi)s.ReadObject(stre);
            return a;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public class Nearest
    {
        public string token { get; set; }
        public string username { get; set; }
        public string imageLink { get; set; }
        public double lon { get; set; }
        public double lat { get; set; }
        public string town { get; set; }


        public override string ToString()
        {
            return token + " " + username + " " + imageLink + " " + lon + " " + lat + " " + town;
        }


        public override bool Equals(object obj)
        {
            if (obj is Nearest)
            {
                Nearest s = (Nearest)obj;
                return token.Equals(s.token);
            }
            else
                return false;

        }
    }


    public class ChatMessage
    {
        public string user { get; set; }
        public string friend { get; set; }
        public string message { get; set; }
        public long date { get; set; }


        public override string ToString()
        {
            return user + "-> " + friend + ":" + message + " at " + date;
        }

    }

}
