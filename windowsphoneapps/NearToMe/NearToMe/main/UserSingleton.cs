using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Runtime.Serialization.Json;
using System.Text;
using System.Threading.Tasks;
using Windows.System.Profile;

namespace NearToMe
{

    public class UserSingleton
    {
        static UserSingleton instance = null;

        public string Identifier { get; private set; }
        public string Token { get; private set; }
        public string UserName { get; set; }
        public double Latitude { set; get; }
        public double Longitude { set; get; }
        public double ImageLink { set; get; }

        private UserSingleton()
        {
            Identifier = GetHardwareId();
        }

        public static UserSingleton GetInstance()
        {
            if (instance == null)
            {
                instance = new UserSingleton();
            }
            return instance;

        }


        string server = "http://127.0.0.1/MyFriends/api.php?action=";

        public enum Action
        {
            ntm_connect,
            ntm_neartome,
            ntm_update,
            ntm_chat
        }

        public List<Friend> nearest = new List<Friend>();


        /// <summary>
        /// isset($_GET['token']) && isset($_GET['username']) && isset($_GET['lat']) && isset($_GET['lon'])) {
        /// </summary>
        public async void Connect()
        {
            HttpClient client = new HttpClient();

            server += Action.ntm_connect.ToString();
            server += "&token=" + Token + "&username=" + UserName + "&lat=" + Latitude + "&lon=" + Longitude;

            string res = await client.GetStringAsync(server);

            ResponseApi result = ResponseApi.GetResponseApiFrom(res);
            main.MessageBox(result.ToString());

        }

        public override string ToString()
        {
            return Token + "\n " + Identifier + "\n " + UserName + "\n " + Latitude + "\n " + Longitude + "\n " + ImageLink;
        }


        public static string GetHardwareId()
        {
            var token = HardwareIdentification.GetPackageSpecificToken(null);
            var hardwareId = token.Id;
            var dataReader = Windows.Storage.Streams.DataReader.FromBuffer(hardwareId);

            byte[] bytes = new byte[hardwareId.Length];
            dataReader.ReadBytes(bytes);

            return BitConverter.ToString(bytes);
        }

    }

    /// <summary>
    /// 
    /// </summary>
    public class ResponseApi
    {

        public string what { get; set; }
        public string type { get; set; }
        public string info { get; set; }
        public string details { get; set; }
        public Result results { get; set; }

        public bool isSuccess()
        {
            return what.Equals("success");
        }
        public override string ToString()
        {
            if (results != null)
            {
                return what + " " + type + " " + info + " " + details + " " + results.ToString() + " ";
            }
            else
            {
                return what + " " + type + " " + info + " " + details;
            }
        }

        public static ResponseApi GetResponseApiFrom(string str)
        {
            DataContractJsonSerializer s = new DataContractJsonSerializer(typeof(ResponseApi));
            MemoryStream stre = new MemoryStream(Encoding.UTF8.GetBytes(str));
            ResponseApi a = (ResponseApi)s.ReadObject(stre);
            return a;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public class Result
    {
        public string pseudo { get; set; }
        public string imageLink { get; set; }
        public double lon { get; set; }
        public double lat { get; set; }

        public override string ToString()
        {
            return pseudo + " " + imageLink + " " + lon + " " + lat + " ";
        }


        public override bool Equals(object obj)
        {
            if (obj is Result)
            {
                Result s = (Result)obj;
                return pseudo.Equals(s.pseudo);
            }
            else
                return false;

        }
    }

}
