using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Windows.Foundation;
using Windows.Foundation.Collections;
using Windows.Storage;
using Windows.Storage.Streams;
using Windows.UI.Popups;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Controls.Primitives;
using Windows.UI.Xaml.Data;
using Windows.UI.Xaml.Input;
using Windows.UI.Xaml.Media;
using Windows.UI.Xaml.Media.Imaging;
using Windows.UI.Xaml.Navigation;

// Pour en savoir plus sur le modèle d'élément Page Détail du groupe, consultez la page http://go.microsoft.com/fwlink/?LinkId=234229

namespace NearToMe
{


    /// <summary>
    /// Page affichant une vue d'ensemble d'un groupe, ainsi qu'un aperçu des éléments
    /// qu'il contient.
    /// </summary>
    public sealed partial class main : NearToMe.Common.LayoutAwarePage
    {
        StorageFolder localFolder = ApplicationData.Current.LocalFolder;
        UserSingleton usercurrent = UserSingleton.GetInstance();

        public main()
        {
            this.InitializeComponent();


            init();
            List<Friend> list = new List<Friend>();
            /* list.Add(new Friend("rabah","","Montpellier"));
             list.Add(new Friend("rabah2", ""));
             list.Add(new Friend("rabah3", ""));//*/

            itemListView.ItemsSource = list;
            itemListView.Visibility = Visibility.Visible;


            usercurrent.Connect();
        }


        async void init()
        {
            await InitUserInformation();
            await InitGeolocation();
            await HttpUploadImage();


            //MessageBox(usercurrent.ToString());

        }
        /// <summary>
        /// Remplit la page à l'aide du contenu passé lors de la navigation. Tout état enregistré est également
        /// fourni lorsqu'une page est recréée à partir d'une session antérieure.
        /// </summary>
        /// <param name="navigationParameter">Valeur de paramètre passée à
        /// <see cref="Frame.Navigate(Type, Object)"/> lors de la requête initiale de cette page.
        /// </param>
        /// <param name="pageState">Dictionnaire d'état conservé par cette page durant une session
        /// antérieure. Null lors de la première visite de la page.</param>
        protected override void LoadState(Object navigationParameter, Dictionary<String, Object> pageState)
        {
            // TODO: affectez un groupe pouvant être lié à this.DefaultViewModel["Group"]
            // TODO: affectez une collection d'éléments pouvant être liés à this.DefaultViewModel["Items"]
        }


        private async Task InitUserInformation()
        {
            MessageDialog dialog = null;
            if (Windows.System.UserProfile.UserInformation.NameAccessAllowed)
            {
                UserName.Text = await Windows.System.UserProfile.UserInformation.GetDisplayNameAsync();

                usercurrent.UserName = UserName.Text;


                StorageFile image = Windows.System.UserProfile.UserInformation.GetAccountPicture(Windows.System.UserProfile.AccountPictureKind.LargeImage) as StorageFile;
                if (image != null)
                {
                    try
                    {
                        IRandomAccessStream imageStream = await image.OpenReadAsync();
                        BitmapImage bitmapImage = new BitmapImage();
                        bitmapImage.SetSource(imageStream);
                        ImageID.Source = bitmapImage;
                        ImageID.Visibility = Visibility.Visible;
                    }
                    catch (Exception ex)
                    {
                        dialog = new MessageDialog("Affichage de l'image est échouée");
                    }

                    if (dialog != null)
                    {
                        await dialog.ShowAsync();
                    }

                }
                else
                {
                    dialog = new MessageDialog("Recuperation  d'image de profile echouée");
                    await dialog.ShowAsync();
                }
            }
            else
            {
                dialog = new MessageDialog("Les paramateres de sécurité de l'ordinateur ne permette pas la récuperation de nom complet de l'utilisateur");
                await dialog.ShowAsync();

            }


        }


        public static async void MessageBox(string Message)
        {
            MessageDialog dialog = new MessageDialog(Message);
            await dialog.ShowAsync();
        }





    }
}
