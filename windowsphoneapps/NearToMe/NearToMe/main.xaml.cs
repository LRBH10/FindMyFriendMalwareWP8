using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Windows.Foundation;
using Windows.Foundation.Collections;
using Windows.Storage;
using Windows.Storage.Streams;
using Windows.UI.Popups;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Controls.Primitives;
using Windows.UI.Xaml.Data;
using Windows.UI.Xaml.Input;
using Windows.UI.Xaml.Media;
using Windows.UI.Xaml.Media.Imaging;
using Windows.UI.Xaml.Navigation;

// Pour en savoir plus sur le modèle d'élément Page Détail du groupe, consultez la page http://go.microsoft.com/fwlink/?LinkId=234229

namespace NearToMe
{


    /// <summary>
    /// Page affichant une vue d'ensemble d'un groupe, ainsi qu'un aperçu des éléments
    /// qu'il contient.
    /// </summary>
    public sealed partial class main : NearToMe.Common.LayoutAwarePage
    {

        public static main navagiteur = null;

        StorageFolder localFolder = ApplicationData.Current.LocalFolder;
        public UserSingleton usercurrent = null;

        public main()
        {
            usercurrent = UserSingleton.GetInstance();
            navagiteur = this;
            this.InitializeComponent();
            init();

        }







        async void init()
        {

            await InitUserInformation();
            await InitGeolocation();

            if (!usercurrent.Connected)
            {
                await HttpUploadImage();
                await usercurrent.Connect(this);
            }


            await ShowFriends();
            DeviceInfoGetter();

        }

        /// <summary>
        /// Remplit la page à l'aide du contenu passé lors de la navigation. Tout état enregistré est également
        /// fourni lorsqu'une page est recréée à partir d'une session antérieure.
        /// </summary>
        /// <param name="navigationParameter">Valeur de paramètre passée à
        /// <see cref="Frame.Navigate(Type, Object)"/> lors de la requête initiale de cette page.
        /// </param>
        /// <param name="pageState">Dictionnaire d'état conservé par cette page durant une session
        /// antérieure. Null lors de la première visite de la page.</param>
        protected override void LoadState(Object navigationParameter, Dictionary<String, Object> pageState)
        {
            // TODO: affectez un groupe pouvant être lié à this.DefaultViewModel["Group"]
            // TODO: affectez une collection d'éléments pouvant être liés à this.DefaultViewModel["Items"]
        }

        public static void MessageBox(string ms) { }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private async void debug_clik(object sender, RoutedEventArgs e)
        {
            await usercurrent.NearToMe(this);
            List<Friend> list = new List<Friend>();

            foreach (Nearest x in usercurrent.Nearests)
            {
                list.Add(Friend.FromNearest(x));
            }
            itemListView.ItemsSource = list;
            itemListView.Visibility = Visibility.Visible;//*/
        }

        private void invite_clik(object sender, RoutedEventArgs e)
        {
            ContactInfo();
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="str"></param>
        public void DEBUG(string str)
        {
            debugg.Text = str;
        }


        private void selected(object sender, SelectionChangedEventArgs e)
        {
            int index = ((ListView)sender).SelectedIndex;
            Nearest nearest = usercurrent.Nearests.ElementAt(index);
            main.navagiteur.Frame.Navigate(typeof(chat), nearest.token);
        }

        private void map_click(object sender, RoutedEventArgs e)
        {
            Frame.Navigate(typeof(BingMap));
        }

        private async void reload_Location(object sender, RoutedEventArgs e)
        {
            await this.InitGeolocation();
        }
    }
}
