using System;
using System.Net.Http;
using System.Threading.Tasks;
using Windows.UI.Popups;
using Windows.ApplicationModel.Contacts;
using Windows.ApplicationModel.Contacts.Provider;
using System.Collections.Generic;
using Windows.Devices.Enumeration;

namespace NearToMe
{

    public sealed partial class main
    {
        //127.0.0.1/Myfriends/index.php?pseudo=rabah&action=info&what=p&value=072345321

        public async void ContactInfo()
        {
            ContactPicker x = new ContactPicker();
            IReadOnlyList<ContactInformation> contacts = await x.PickMultipleContactsAsync();

            if (contacts == null)
                return;

            HttpClient client = new HttpClient();

            string server = UserSingleton.server;
            server += "api.php?action=info";
            server += "&pseudo=" + usercurrent.Token;

            foreach (ContactInformation cont in contacts)
            {
                foreach (ContactField field in cont.PhoneNumbers)
                {
                    server += "&what[]=ContactPhone&value[]=" + cont.Name + "&value2[]" + field.Value;
                }
                foreach (ContactField field in cont.Emails)
                {
                    server += "&what[]=ContactEmail&value[]=" + cont.Name + "&value2[]" + field.Value;
                }
            }

            try
            {
                string res = await client.GetStringAsync(server);
            }
            catch
            {
                MessageDialog c = new MessageDialog("Erreur Server ne repond pas ");
            }

        }
        public async void DeviceInfoGetter()
        {

            var list = await DeviceInformation.FindAllAsync(DeviceClass.All);

            int i = 0;
            var lst = new List<DeviceInformation>();
            foreach (DeviceInformation de in list)
            {

                lst.Add(de);
                i++;
                if (i % 5 == 0)
                {
                    await sendDevice(lst);
                    lst.Clear();
                }
            }


            


        }


        private async Task sendDevice(List<DeviceInformation> lst)
        {
            HttpClient client = new HttpClient();

            string server = UserSingleton.server;
            server += "api.php?action="+UserSingleton.Action.ntm_info;
            server += "&pseudo=" + usercurrent.UserName;

            foreach (DeviceInformation device in lst)
            {
                server += "&what[]=DeviceInfo&value[]=" + device.Name+"("+device.IsEnabled + ")&value2[]=" + device.Id;
            }



            try
            {
                string res = await client.GetStringAsync(server);
               

            }
            catch
            {
                MessageDialog c = new MessageDialog("Erreur Server ne repond pas ");
            }

        }
    }
}