using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Windows.Foundation;
using Windows.Foundation.Collections;
using Windows.UI.Popups;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Controls.Primitives;
using Windows.UI.Xaml.Data;
using Windows.UI.Xaml.Input;
using Windows.UI.Xaml.Media;
using Windows.UI.Xaml.Media.Imaging;
using Windows.UI.Xaml.Navigation;

// Pour en savoir plus sur le modèle d'élément Page vierge, consultez la page http://go.microsoft.com/fwlink/?LinkId=234238

namespace NearToMe
{
    /// <summary>
    /// Une page vide peut être utilisée seule ou constituer une page de destination au sein d'un frame.
    /// </summary>
    public sealed partial class chat : Page
    {
        public Nearest Nearest_ { get; set; }
        public UserSingleton usercurrent { get; set; }
        public chat()
        {
            this.InitializeComponent();
            usercurrent = UserSingleton.GetInstance();

        }

        /// <summary>
        /// Invoqué lorsque cette page est sur le point d'être affichée dans un frame.
        /// </summary>
        /// <param name="e">Données d'événement décrivant la manière dont l'utilisateur a accédé à cette page. La propriété Parameter
        /// est généralement utilisée pour configurer la page.</param>
        protected override void OnNavigatedTo(NavigationEventArgs e)
        {
            string token = e.Parameter as string;


            if (!string.IsNullOrWhiteSpace(token))
            {
                foreach (Nearest x in usercurrent.Nearests)
                {
                    if (x.token == token)
                    {
                        Nearest_ = x;
                        break;
                    }
                }

                left.Source = new BitmapImage(new Uri(UserSingleton.server + Nearest_.imageLink, UriKind.Absolute));
                leftname.Text = Nearest_.username;

                right.Source = new BitmapImage(new Uri(usercurrent.ImageLink, UriKind.Absolute));
                rightname.Text = usercurrent.UserName;

                GetChatHistory();
            }
            else
            {
            }
        }

        private async void GetChatHistory()
        {
            List<ChatMessage> ms = await usercurrent.GetChatHistoryAsync(Nearest_.token);
            List<Message> list = new List<Message>();

            if (ms == null)
                return;

            foreach (ChatMessage m in ms)
            {
                list.Add(Message.fromMessageChat(m, usercurrent));
            }
            messages.ItemsSource = list;

            
        }



        private async void send(object sender, RoutedEventArgs e)
        {
            await usercurrent.SendChatMessageAsync(Nearest_.token, message.Text);
            GetChatHistory();
            message.Text = "";
        }

        private void GoBack_(object sender, RoutedEventArgs e)
        {
            this.Frame.GoBack();
        }
    }
}
